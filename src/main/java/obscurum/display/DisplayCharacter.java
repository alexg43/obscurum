package obscurum.display;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

import java.util.Arrays;

@RequiredArgsConstructor @Getter
public enum DisplayCharacter {
    NULL((char) 0),
    EMPTY_FACE((char) 1),
    FILLED_FACE((char) 2),
    HEART((char) 3),
    DIAMOND((char) 4),
    CLUB((char) 5),
    SPADE((char) 6),
    BULLET((char) 7),
    RECTANGLE_EMPTY_CIRCLE((char) 8),
    EMPTY_CIRCLE((char) 9),
    RECTANGLE_FILLED_CIRCLE((char) 10),
    MALE((char) 11),
    FEMALE((char) 12),
    MUSIC_1((char) 13),
    MUSIC_2((char) 14),
    STAR((char) 15),
    RIGHT_TRIANGLE((char) 16),
    LEFT_TRIANGLE((char) 17),
    UP_DOWN_ARROW_1((char) 18),
    DOUBLE_EXCLAMATION_MARK((char) 19),
    PARAGRAPH_SIGN((char) 20),
    SECTION_SIGN((char) 21),
    MUSIC_3((char) 22),
    UP_DOWN_ARROW_2((char) 23),
    UP_ARROW((char) 24),
    DOWN_ARROW((char) 25),
    RIGHT_ARROW((char) 26),
    LEFT_ARROW((char) 27),
    FILE_SEPARATOR((char) 28),
    LEFT_RIGHT_TRIANGLES((char) 29),
    UP_TRIANGLE((char) 30),
    DOWN_TRIANGLE((char) 31),
    SPACE((char) 32),
    EXCLAMATION_MARK((char) 33),
    DOUBLE_QUOTE((char) 34),
    HASH((char) 35),
    DOLLAR_SIGN((char) 36),
    PERCENT((char) 37),
    AMPERSAND((char) 38),
    SINGLE_QUOTE((char) 39),
    OPEN_BRACKET((char) 40),
    CLOSED_BRACKET((char) 41),
    ASTERISK((char) 42),
    PLUS((char) 43),
    COMMA((char) 44),
    MINUS((char) 45),
    PERIOD((char) 46),
    SLASH((char) 47),
    ZERO((char) 48),
    ONE((char) 49),
    TWO((char) 50),
    THREE((char) 51),
    FOUR((char) 52),
    FIVE((char) 53),
    SIX((char) 54),
    SEVEN((char) 55),
    EIGHT((char) 56),
    NINE((char) 57),
    COLON((char) 58),
    SEMICOLON((char) 59),
    LESS_THAN((char) 60),
    EQUALS((char) 61),
    GREATER_THAN((char) 62),
    QUESTION_MARK((char) 63),
    AT((char) 64),
    UPPERCASE_A((char) 65),
    UPPERCASE_B((char) 66),
    UPPERCASE_C((char) 67),
    UPPERCASE_D((char) 68),
    UPPERCASE_E((char) 69),
    UPPERCASE_F((char) 70),
    UPPERCASE_G((char) 71),
    UPPERCASE_H((char) 72),
    UPPERCASE_I((char) 73),
    UPPERCASE_J((char) 74),
    UPPERCASE_K((char) 75),
    UPPERCASE_L((char) 76),
    UPPERCASE_M((char) 77),
    UPPERCASE_N((char) 78),
    UPPERCASE_O((char) 79),
    UPPERCASE_P((char) 80),
    UPPERCASE_Q((char) 81),
    UPPERCASE_R((char) 82),
    UPPERCASE_S((char) 83),
    UPPERCASE_T((char) 84),
    UPPERCASE_U((char) 85),
    UPPERCASE_V((char) 86),
    UPPERCASE_W((char) 87),
    UPPERCASE_X((char) 88),
    UPPERCASE_Y((char) 89),
    UPPERCASE_Z((char) 90),
    OPEN_SQUARE_BRACKET((char) 91),
    BACKSLASH((char) 92),
    CLOSED_SQUARE_BRACKET((char) 93),
    CARET((char) 94),
    UNDERSCORE((char) 95),
    BACKTICK((char) 96),
    LOWERCASE_A((char) 97),
    LOWERCASE_B((char) 98),
    LOWERCASE_C((char) 99),
    LOWERCASE_D((char) 100),
    LOWERCASE_E((char) 101),
    LOWERCASE_F((char) 102),
    LOWERCASE_G((char) 103),
    LOWERCASE_H((char) 104),
    LOWERCASE_I((char) 105),
    LOWERCASE_J((char) 106),
    LOWERCASE_K((char) 107),
    LOWERCASE_L((char) 108),
    LOWERCASE_M((char) 109),
    LOWERCASE_N((char) 110),
    LOWERCASE_O((char) 111),
    LOWERCASE_P((char) 112),
    LOWERCASE_Q((char) 113),
    LOWERCASE_R((char) 114),
    LOWERCASE_S((char) 115),
    LOWERCASE_T((char) 116),
    LOWERCASE_U((char) 117),
    LOWERCASE_V((char) 118),
    LOWERCASE_W((char) 119),
    LOWERCASE_X((char) 120),
    LOWERCASE_Y((char) 121),
    LOWERCASE_Z((char) 122),
    OPEN_BRACE((char) 123),
    VERTICAL_BAR((char) 124),
    CLOSED_BRACE((char) 125),
    TILDE((char) 126),
    DELETE((char) 127),
    UPPERCASE_C_CEDILLA((char) 128),
    LOWERCASE_U_DIAERESIS((char) 129),
    LOWERCASE_E_ACUTE((char) 130),
    LOWERCASE_A_CIRCUMFLEX((char) 131),
    LOWERCASE_A_DIAERESIS((char) 132),
    LOWERCASE_A_GRAVE((char) 133),
    LOWERCASE_A_RING((char) 134),
    LOWERCASE_C_CEDILLA((char) 135),
    LOWERCASE_E_CIRCUMFLEX((char) 136),
    LOWERCASE_E_DIAERESIS((char) 137),
    LOWERCASE_E_GRAVE((char) 138),
    LOWERCASE_I_DIAERESIS((char) 139),
    LOWERCASE_I_CIRCUMFLEX((char) 140),
    LOWERCASE_I_GRAVE((char) 141),
    UPPERCASE_A_DIAERESIS((char) 142),
    UPPERCASE_A_RING((char) 143),
    UPPERCASE_E_ACUTE((char) 144),
    LOWERCASE_AE((char) 145),
    UPPERCASE_AE((char) 146),
    LOWERCASE_O_CIRCUMFLEX((char) 147),
    LOWERCASE_O_DIAERESIS((char) 148),
    LOWERCASE_O_GRAVE((char) 149),
    LOWERCASE_U_CIRCUMFLEX((char) 150),
    LOWERCASE_U_GRAVE((char) 151),
    LOWERCASE_Y_DIAERESIS((char) 152),
    UPPERCASE_O_DIAERESIS((char) 153),
    UPPERCASE_U_DIAERESIS((char) 154),
    CENT_SIGN((char) 155),
    POUND_SIGN((char) 156),
    YEN_SIGN((char) 157),
    PESETA_SIGN((char) 158),
    LOWERCASE_F_HOOK((char) 159),
    LOWERCASE_A_ACUTE((char) 160),
    LOWERCASE_I_ACUTE((char) 161),
    LOWERCASE_O_ACUTE((char) 162),
    LOWERCASE_U_ACUTE((char) 163),
    LOWERCASE_N_TILDE((char) 164),
    UPPERCASE_N_TILDE((char) 165),
    FEMININE_ORDINAL((char) 166),
    MASCULINE_ORDINAL((char) 167),
    INVERTED_QUESTION_MARK((char) 168),
    REVERSED_NOT_SIGN((char) 169),
    NOT_SIGN((char) 170),
    ONE_HALF_FRACTION((char) 171),
    ONE_QUARTER_FRACTION((char) 172),
    INVERTED_EXCLAMATION_MARK((char) 173),
    LEFT_DOUBLE_ANGLE_QUOTE((char) 174),
    RIGHT_DOUBLE_ANGLE_QUOTE((char) 175),
    LIGHT_SHADE((char) 176),
    MEDIUM_SHADE((char) 177),
    DARK_SHADE((char) 178),
    BOX_LIGHT_VERTICAL((char) 179),
    BOX_LIGHT_VERTICAL_LEFT((char) 180),
    BOX_VERTICAL_SINGLE_LEFT_DOUBLE((char) 181),
    BOX_VERTICAL_DOUBLE_LEFT_SINGLE((char) 182),
    BOX_DOWN_DOUBLE_LEFT_SINGLE((char) 183),
    BOX_DOWN_SINGLE_LEFT_DOUBLE((char) 184),
    BOX_DOUBLE_VERTICAL_LEFT((char) 185),
    BOX_DOUBLE_VERTICAL((char) 186),
    BOX_DOUBLE_DOWN_LEFT((char) 187),
    BOX_DOUBLE_UP_LEFT((char) 188),
    BOX_UP_DOUBLE_LEFT_SINGLE((char) 189),
    BOX_UP_SINGLE_LEFT_DOUBLE((char) 190),
    BOX_LIGHT_DOWN_LEFT((char) 191),
    BOX_LIGHT_UP_RIGHT((char) 192),
    BOX_LIGHT_UP_HORIZONTAL((char) 193),
    BOX_LIGHT_DOWN_HORIZONTAL((char) 194),
    BOX_LIGHT_VERTICAL_RIGHT((char) 195),
    BOX_LIGHT_HORIZONTAL((char) 196),
    BOX_LIGHT_VERTICAL_HORIZONTAL((char) 197),
    BOX_VERTICAL_SINGLE_RIGHT_DOUBLE((char) 198),
    BOX_VERTICAL_DOUBLE_RIGHT_SINGLE((char) 199),
    BOX_DOUBLE_UP_RIGHT((char) 200),
    BOX_DOUBLE_DOWN_RIGHT((char) 201),
    BOX_DOUBLE_UP_HORIZONTAL((char) 202),
    BOX_DOUBLE_DOWN_HORIZONTAL((char) 203),
    BOX_DOUBLE_VERTICAL_RIGHT((char) 204),
    BOX_DOUBLE_HORIZONTAL((char) 205),
    BOX_DOUBLE_VERTICAL_HORIZONTAL((char) 206),
    BOX_UP_SINGLE_HORIZONTAL_DOUBLE((char) 207),
    BOX_UP_DOUBLE_HORIZONTAL_SINGLE((char) 208),
    BOX_DOWN_SINGLE_HORIZONTAL_DOUBLE((char) 209),
    BOX_DOWN_DOUBLE_HORIZONTAL_SINGLE((char) 210),
    BOX_UP_DOUBLE_RIGHT_SINGLE((char) 211),
    BOX_UP_SINGLE_RIGHT_DOUBLE((char) 212),
    BOX_DOWN_SINGLE_RIGHT_DOUBLE((char) 213),
    BOX_DOWN_DOUBLE_RIGHT_SINGLE((char) 214),
    BOX_VERTICAL_DOUBLE_HORIZONTAL_SINGLE((char) 215),
    BOX_VERTICAL_SINGLE_HORIZONTAL_DOUBLE((char) 216),
    BOX_LIGHT_UP_LEFT((char) 217),
    BOX_LIGHT_DOWN_RIGHT((char) 218),
    FULL_BLOCK((char) 219),
    LOWER_HALF_BLOCK((char) 220),
    LEFT_HALF_BLOCK((char) 221),
    RIGHT_HALF_BLOCK((char) 222),
    UPPER_HALF_BLOCK((char) 223),
    LOWERCASE_ALPHA((char) 224),
    LOWERCASE_SHARP_S((char) 225),
    UPPERCASE_GAMMA((char) 226),
    LOWERCASE_PI((char) 227),
    UPPERCASE_SIGMA((char) 228),
    LOWERCASE_SIGMA((char) 229),
    MICRO_SIGN((char) 230),
    LOWERCASE_TAU((char) 231),
    UPPERCASE_PHI((char) 232),
    UPPERCASE_THETA((char) 233),
    UPPERCASE_OMEGA((char) 234),
    LOWERCASE_DELTA((char) 235),
    INFINITY((char) 236),
    LOWERCASE_PHI((char) 237),
    LOWERCASE_EPSILON((char) 238),
    INTERSECTION((char) 239),
    IDENTICAL_TO((char) 240),
    PLUS_MINUS_SIGN((char) 241),
    GREATER_THAN_OR_EQUAL_TO((char) 242),
    LESS_THAN_OR_EQUAL_TO((char) 243),
    TOP_HALF_INTEGRAL((char) 244),
    BOTTOM_HALF_INTEGRAL((char) 245),
    DIVISION_SIGN((char) 246),
    ALMOST_EQUAL_SIGN((char) 247),
    DEGREE_SIGN((char) 248),
    BULLET_OPERATOR((char) 249),
    MIDDLE_DOT((char) 250),
    SQUARE_ROOT((char) 251),
    SUPERSCRIPT_LOWERCASE_N((char) 252),
    SUPERSCRIPT_TWO((char) 253),
    BLACK_SQUARE((char) 254),
    NO_BREAK_SPACE((char) 255);

    private final char character;

    public static DisplayCharacter of(char character) {
        return Arrays.stream(values())
                .filter(displayCharacter -> displayCharacter.character == character)
                .findFirst()
                .orElseThrow(() -> new NullPointerException(String.format("No character found for \"%c\"", character)));
    }
}